// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  clerkId    String    @unique
  email      String    @unique
  firstName  String
  lastName   String
  birthYear  Int?
  birthMonth String?
  birthDay   Int?
  gender     String?
  city       String
  state      String
  zipCode    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  recipes    Recipe[]
  comments   Comment[]
  likes      Like[]
  ratings    Rating[]
}

model Recipe {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  ingredients    Ingredient[]
  steps          Step[]
  isPublic       Boolean?         @default(false)
  author         User             @relation(fields: [authorId], references: [id])
  authorId       Int
  comments       Comment[]
  likes          Like[]
  ratings        Rating[]
  RecipeCategory RecipeCategory[]
  image          String? // Optional image field
}

model Step {
  id       Int    @id @default(autoincrement())
  step     String
  order    Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  name     String
  quantity Float
  unit     String
  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
}

model Like {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  @@unique([userId, recipeId])
}

model Rating {
  id       Int    @id @default(autoincrement())
  score    Int // Consider enforcing a range, e.g., 1-5
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  @@unique([userId, recipeId])
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String
  RecipeCategory RecipeCategory[]
}

model RecipeCategory {
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([recipeId, categoryId])
}
